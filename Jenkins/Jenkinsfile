pipeline {
    agent any

    environment {
        TF_VAR_access_key       ="${aws_access_key}"
        TF_VAR_secret_key       ="${aws_secret_key}"
        TF_VAR_instance_region  ="${instance_region}"
        TF_VAR_bucket_name      ="${bucket_name}"
        TF_VAR_bucket_region    ="${bucket_region}"

        // Proxy Settings
        HTTP_PROXY  = "http://${proxy_user}:${proxy_pass}@primary-proxy.gslb.intranet.barcapint.com:8080"
        HTTPS_PROXY = "http://${proxy_user}:${proxy_pass}@primary-proxy.gslb.intranet.barcapint.com:8080"
        http_proxy  = "http://${proxy_user}:${proxy_pass}@primary-proxy.gslb.intranet.barcapint.com:8080"
        https_proxy = "http://${proxy_user}:${proxy_pass}@primary-proxy.gslb.intranet.barcapint.com:8080"
    }

    stages {
        stage('Setup Environment') {
            parallel {
                stage('Checkout code') {
                    steps {
                        sh '''
                            git config --system http.sslVerify false    
                            git config --global http.sslVerify false    
                        '''
                        git branch: 'master',
                                credentialsId: 'stash_credentials',
                                url: 'https://stash.barcapint.com:8443/scm/~tonacobr/strange_simulator.git'
                    }
                }
                stage('apk packages') {
                    steps {
                        sh '''
                            apk update
                            if [ ! $(which sudo) ]; then apk add sudo; fi
                            if [ ! $(which wget) ]; then apk add wget; fi
                            if [ ! $(which python3) ]; then apk add python3; fi
                            if [ ! $(which terraform) ]; then apk add terraform; fi
                        '''
                    }
                }
            }
        }

        stage('Python Setup'){
            steps {
                sh '''
                if [ ! -d venv ]; then python3 -m venv venv; fi
                source venv/bin/activate
                pip install --upgrade pip
                pip install -r python/requirements.txt
                deactivate'''
            }

        }

        stage("Build") {
            parallel {
                stage("AWS") {
                    stages {
                        stage("PERSONAL") {
                            when { environment name: 'AWS_ENV', value: 'PERSONAL' }
                            steps {
                                script {
                                    if ( !fileExists('./infrastructure/mykey') ) {
                                        sh 'ssh-keygen -f ./infrastructure/mykey'
                                    } else {
                                        echo 'Key-pair files already generated!'
                                    }
                                }
                                dir('infrastructure') {
                                    sh 'terraform init'
                                    sh 'terraform plan --out=plan'
                                    sh 'terraform apply plan'
                                }
                            }
                        }
                        stage("ENTERPRISE"){
                            when { environment name: 'AWS_ENV', value: 'ENTERPRISE' }
                            steps {
                                echo "Run/Test Z's shell script"  // TODO
                                echo "Run terraform stuff"
                            }
                        }
                    }
                    post {
                        unsuccessful {
                            sh 'terraform destroy --auto-approve'
                        }
                    }
                }
                stage("Cohesity"){
                    stages {
                        stage('Download/Generate Sample Files') {
                            steps {
                                echo "Placeholder for generate test cases"
                            }
                        }
                    }
                }
                stage("EMC"){
                    stages {
                        stage('Sample Stage I') {
                            steps {
                                echo 'Generating local directory'
                            }
                        }
                        stage('Sample Stage II') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                    }
                }
                stage("PURE"){
                    stages {
                        stage('Sample Stage I') {
                            steps {
                                echo 'Generating local directory'
                            }
                        }
                        stage('Sample Stage II') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                        stage('Sample Stage III') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                    }
                }
            }
        }

        stage('Run Simulations') {
            parallel {
                stage('AWS') {
                    stages {
                        stage('PERSONAL') {
                            when { environment name: 'AWS_ENV', value: 'PERSONAL' }
                            steps {
                                dir('infrastructure') {
                                    sh '''
                                        ssh -o "StrictHostKeyChecking=no" \
                                            -i mykey ec2-user@$(terraform output instance-public-ip) \
                                            "/simulator/run_simulator.sh"
                                    '''
                                }
                            }
                        }
                        stage('ENTERPRISE'){
                            when { environment name: 'AWS_ENV', value: 'ENTERPRISE' }
                            steps {
                                echo "Do enterprise side stuff"
                            }
                        }
                    }
                }
                stage('Cohesity') {
                    stages {
                        stage('Random Files') {
                            steps {
                                echo "Cohesity Simulations"
//                                sh 'bash scripts/run_cohesity.sh'
                            }
                        }
                    }
                }
            }
        }

        stage('Finalize') {
            parallel {
                stage('AWS') {
                    stages {
                        stage('Terraform | Destroy') {
                            steps {
                                dir('infrastructure') {
                                    sh 'terraform destroy -auto-approve'
                                }
                            }
                        }
                    }
                }
                stage('Cohesity') { steps { sh 'rm -rf /tmp/sample_data' } }  // Erase file , get report
            }
        }
    }
}