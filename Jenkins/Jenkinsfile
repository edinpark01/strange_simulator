pipeline {
    agent any

    environment {
        TF_VAR_access_key       ="${ACCESS_KEY}"
        TF_VAR_secret_key       ="${SECRET_KEY}"
        TF_VAR_instance_region  ="${REGION}"
        TF_VAR_bucket_name      ="${BUCKET_NAME}"
        TF_VAR_bucket_region    ="${BUCKET_REGION}"

        tfHome = tool name: 'terraform'
        PATH   = "${tfHome}:${PATH}"
    }

    stages {
        stage('Checkout code') {
            steps {
                git (
                    url: 'https://github.com/edinpark01/strange_simulator',
                    branch: 'master'
                )
            }
        }

        stage("Setup Environment") {
            parallel {
                stage("AWS-Personal") {
                    when { environment name: 'AWS_ENV', value: 'PERSONAL' }
                    stages {
                        stage('Generate Key-Value Pair') {
                            steps {
                                script {
                                    if ( !fileExists('./infrastructure/mykey') ) {
                                        sh 'ssh-keygen -f ./infrastructure/mykey'
                                    } else {
                                        echo 'Key-pair files already generated!'
                                    }
                                }
                            }
                        }
                        stage('Terraform | Check Installation') {
                            steps { sh 'terraform --version' }
                        }

                        stage('Terraform | Plan & Apply') {
                            steps {
                                dir('infrastructure') {
                                    sh 'terraform init'
                                    sh 'terraform plan --out=plan'
                                    sh 'terraform apply plan'
                                }
                            }
                        }
                    }
                }
                stage("AWS-Enterprise") {
                    when { environment name: 'AWS_ENV', value: 'ENTERPRISE' }
                    stages {
                        stage('Get Temporary API credentials') {
                            steps {
                                echo "Run/Test Z's shell script"  // TODO
                            }
                        }
                        stage('Terraform | Check Installation') {
                            steps { sh 'terraform --version' }
                        }

                        stage('Terraform | Plan & Apply') {
                            steps {
                                echo "Run terraform stuff"
                            }
                        }
                    }
                }

                stage("Cohesity"){
                    stages {
                        stage('Sample Stage I') {
                            steps {
                                echo 'Generating local directory'
                            }
                        }
                        stage('Sample Stage II') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                    }
                }
                stage("EMC"){
                    stages {
                        stage('Sample Stage I') {
                            steps {
                                echo 'Generating local directory'
                            }
                        }
                        stage('Sample Stage II') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                    }
                }
                stage("PURE"){
                    stages {
                        stage('Sample Stage I') {
                            steps {
                                echo 'Generating local directory'
                            }
                        }
                        stage('Sample Stage II') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                        stage('Sample Stage III') {
                            steps {
                                echo 'GOTCHA!'
                            }
                        }
                    }
                }
            }
        }

        stage('Run Simulations') {
            parallel {
                stage('AWS') {
                    when { environment name: 'AWS_ENV', value: 'PERSONAL' }
                    stages {
                        stage('Write to S3') {
                            steps {
                                dir('infrastructure') {
                                    sh '''
                                        ssh -o "StrictHostKeyChecking=no" \
                                            -i mykey ec2-user@$(terraform output instance-public-ip) \
                                            "/simulator/run_simulator.sh"
                                    '''
                                }
                            }
                        }
                    }
                }
                stage('Cohesity') {
                    stages {
                        stage('Sample Simulation I') { steps { echo 'Sim I' } }
                        stage('Sample Simulation II') { steps { echo 'Sim II' } }
                    }
                }
            }
        }

        stage('Finalize') {
            parallel {
                stage('AWS') {
                    stages {
                        stage('Terraform | Destroy') {
                            steps {
                                dir('infrastructure') {
                                    sh 'terraform destroy -auto-approve'
                                }
                            }
                        }
                    }
                }
                stage('Cohesity') { steps { echo 'Finalize Cohesity stuff'} }
            }
        }
    }
}